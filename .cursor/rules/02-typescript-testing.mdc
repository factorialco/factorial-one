---
description: "F0 - TypeScript Usage and Testing Standards"
globs: "packages/react/**/\*.ts,packages/react/**/\*.tsx"
alwaysApply: false
---

# TypeScript Usage

- Use **strict** TypeScript configuration.
- Prefer **interfaces** over types for public APIs.
- Use discriminated unions for complex state.
- Export component prop interfaces.
- Implement proper generic constraints.
- `any` is a non aceptable type, avoid its use

# Testing Standards

- Write **Vitest** unit tests for utilities and hooks and components.
- Create **Storybook stories** for visual testing.
- Include **accessibility tests** using axe-playwright.
- Test component variants and edge cases.
- Avoid excessive mocking; test behavior, not internals.
- Always run tests to confirm changes.
- <IMPORTANT> When you are using `@testing-library/react` don't use `render`, use `zeroRender` from `@/testing/test-utils.tsx` instead as this provides mocks for the context providers.</IMPORTANT>
- Do not import `@testing-library/jest-dom`
- Import vitest methods like: describe, it, expect, etc. explicitily
- name test files with `.test.tsx` or `.test.ts`, never with `.specs.ts`

## Example with Icon component

```tsx
// packages/react/src/components/Utilities/Icon/index.tsx
import { cn } from "../../../lib/utils";
import { cva, type VariantProps } from "cva";
import {
  forwardRef,
  ForwardRefExoticComponent,
  RefAttributes,
  SVGProps,
} from "react";

export interface IconProps
  extends SVGProps<SVGSVGElement>,
    VariantProps<typeof iconVariants> {
  icon: IconType;
  state?: "normal" | "animate";
}

export type IconType = ForwardRefExoticComponent<
  SVGProps<SVGSVGElement> &
    RefAttributes<SVGSVGElement> & {
      animate?: "normal" | "animate";
    }
>;

export const Icon = forwardRef<SVGSVGElement, IconProps>(function Icon(
  { size, icon, state = "normal", className, ...props },
  ref
) {
  if (!icon) return null;
  const Component = icon;
  const isAnimated = icon.displayName?.includes("Animated");

  if (isAnimated) {
    return (
      <Component
        ref={ref}
        {...props}
        animate={state}
        className={cn("select-none", className)}
      />
    );
  }

  return (
    <Component
      ref={ref}
      {...props}
      className={cn("aspect-square", iconVariants({ size }), className)}
    />
  );
});
```

````mdx
// packages/react/src/components/Utilities/Icon/index.mdx
import { Meta, Canvas, Controls } from "@storybook/blocks"
import LinkTo from "@storybook/addon-links/react"
import \* as IconStories from "./index.stories"
import { DoDonts } from "@/lib/storybook-utils/do-donts"

<Meta title="Icon" />

# Icon

The Icon component is used to display an icon from the
[Icons library](mdc:docs/foundations-icons--documentation).

## Anatomy

<Canvas of={IconStories.App} />
<Controls of={IconStories.App} />

## Usage

### Import

Import the Icon component and the icon you want to display. Then, pass the icon
to the Icon component as a prop.

{/* prettier-ignore */}
```jsx
import { Icon } from "@/components/Utilities/Icon"
import { Archive } from "@/icons/app"

<Icon icon={Archive} size="md" />
```

<DoDonts
  do={{
    description: "Use the Icon component to display an icon.",
  }}
  dont={{
    description: "Use the icon directly, without the Icon component.",
  }}
/>

### Color

The Icon will be displayed with the color of the text. You can change the color
using the `className` prop, or setting a text color for the container. Please
use
[one of the specific color tokens](mdc:docs/foundations-colors--documentation#icon)
for icons.

```jsx
<Icon icon={Archive} className="text-f1-icon-secondary" />
```
````

```tsx
// packages/react/src/components/Utilities/Icon/index.stories.tsx
import type { Meta, StoryObj } from "@storybook/react";
import { useState } from "react";

import * as AnimatedIcons from "../../../icons/animated";
import * as Icons from "../../../icons/app";
import * as ModuleIcons from "../../../icons/modules";
import { ComponentProps } from "react";
import { Icon } from "./index";

const meta = {
  title: "Icon",
  component: Icon,
  argTypes: {
    icon: {
      control: "select",
      options: Object.keys(Icons),
      mapping: Icons,
      description: "Select an icon to display",
    },
    size: {
      control: "radio",
      options: ["xs", "sm", "md", "lg"],
      description: "Size of the icon",
    },
  },
  parameters: {
    layout: "centered",
  },
  tags: ["autodocs", "stable"],
} satisfies Meta<ComponentProps<typeof Icon>>;

export default meta;
type Story = StoryObj<typeof meta>;

export const App: Story = {
  args: {
    size: "lg",
    icon: Icons.ChartLine,
  },
};

export const Module: Story = {
  args: {
    size: "lg",
    icon: ModuleIcons.Calendar,
  },
  argTypes: {
    icon: {
      control: "select",
      options: Object.keys(ModuleIcons),
      mapping: ModuleIcons,
    },
  },
};

export const Animated: Story = {
  args: {
    size: "md",
    icon: AnimatedIcons.HomeAnimated,
  },
  argTypes: {
    icon: {
      control: "select",
      options: Object.keys(AnimatedIcons),
      mapping: AnimatedIcons,
      description: "Select an icon to display",
    },
    size: {
      control: "radio",
      options: ["sm", "md", "lg"],
      description: "Size of the icon",
    },
  },
  render: ({ size, icon }) => {
    const [isHovered, setIsHovered] = useState(false);

    return (
      <div
        className="flex items-center justify-center rounded-lg p-4 transition-colors hover:bg-f1-background-secondary"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <Icon
          icon={icon}
          state={isHovered ? "animate" : "normal"}
          size={size}
        />
      </div>
    );
  },
};
```
